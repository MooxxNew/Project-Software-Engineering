/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.SQL.mydsl1.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.SQL.mydsl1.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.SQL.mydsl1.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getSelectsSelectParserRuleCall_0()); 
	    }
		lv_selects_0_0=ruleSelect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"selects",
        		lv_selects_0_0, 
        		"Select");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	 iv_ruleSelect=ruleSelect 
	 { $current=$iv_ruleSelect.current; } 
	 EOF 
;

// Rule Select
ruleSelect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='SELECT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectAccess().getSELECTKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getSelect_valueVariableParserRuleCall_1_0()); 
	    }
		lv_select_value_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		add(
       			$current, 
       			"select_value",
        		lv_select_value_1_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='FROM' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectAccess().getFROMKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getFroms_valueVariableParserRuleCall_3_0()); 
	    }
		lv_froms_value_3_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		add(
       			$current, 
       			"froms_value",
        		lv_froms_value_3_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getOptionsOptionParserRuleCall_4_0()); 
	    }
		lv_options_4_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		add(
       			$current, 
       			"options",
        		lv_options_4_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getValuesValueParserRuleCall_0_0()); 
	    }
		lv_values_0_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_0_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getValues1ValueParserRuleCall_1_1_0()); 
	    }
		lv_values1_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		add(
       			$current, 
       			"values1",
        		lv_values1_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getValueAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleOption
entryRuleOption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionRule()); }
	 iv_ruleOption=ruleOption 
	 { $current=$iv_ruleOption.current; } 
	 EOF 
;

// Rule Option
ruleOption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionAccess().getWhereWhereParserRuleCall_0()); 
	    }
		lv_where_0_0=ruleWhere		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionRule());
	        }
       		add(
       			$current, 
       			"where",
        		lv_where_0_0, 
        		"Where");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleWhere
entryRuleWhere returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhereRule()); }
	 iv_ruleWhere=ruleWhere 
	 { $current=$iv_ruleWhere.current; } 
	 EOF 
;

// Rule Where
ruleWhere returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='WHERE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhereAccess().getWHEREKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhereAccess().getExprsExpressionParserRuleCall_1_0()); 
	    }
		lv_exprs_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhereRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWhereAccess().getAndANDParserRuleCall_2_0()); 
	    }
		lv_and_2_0=ruleAND		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhereRule());
	        }
       		add(
       			$current, 
       			"and",
        		lv_and_2_0, 
        		"AND");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getWhereAccess().getOrORParserRuleCall_3_0()); 
	    }
		lv_or_3_0=ruleOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhereRule());
	        }
       		add(
       			$current, 
       			"or",
        		lv_or_3_0, 
        		"OR");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWhereAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getColumnValueParserRuleCall_0_0()); 
	    }
		lv_column_0_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"column",
        		lv_column_0_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getConditionParserRuleCall_1()); 
    }
ruleCondition
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getResultValueParserRuleCall_2_0()); 
	    }
		lv_result_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"result",
        		lv_result_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCondition
entryRuleCondition returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); } 
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current.getText(); }  
	 EOF 
;

// Rule Condition
ruleCondition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionAccess().getEqualsSignKeyword_0()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionAccess().getLessThanSignKeyword_1()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionAccess().getLessThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionAccess().getGreaterThanSignEqualsSignKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleAND
entryRuleAND returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getANDRule()); }
	 iv_ruleAND=ruleAND 
	 { $current=$iv_ruleAND.current; } 
	 EOF 
;

// Rule AND
ruleAND returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='AND' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getANDAccess().getANDKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getANDAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_2='AND' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getANDAccess().getANDKeyword_1_0());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getANDAccess().getLeftParenthesisKeyword_1_1());
    }

    { 
        newCompositeNode(grammarAccess.getANDAccess().getExpressionParserRuleCall_1_2()); 
    }
    this_Expression_4=ruleExpression
    { 
        $current = $this_Expression_4.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getANDAccess().getAndANDParserRuleCall_1_3_0()); 
	    }
		lv_and_5_0=ruleAND		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getANDRule());
	        }
       		add(
       			$current, 
       			"and",
        		lv_and_5_0, 
        		"AND");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getANDAccess().getOrORParserRuleCall_1_4_0()); 
	    }
		lv_or_6_0=ruleOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getANDRule());
	        }
       		add(
       			$current, 
       			"or",
        		lv_or_6_0, 
        		"OR");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getANDAccess().getRightParenthesisKeyword_1_5());
    }
))
;





// Entry rule entryRuleOR
entryRuleOR returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getORRule()); }
	 iv_ruleOR=ruleOR 
	 { $current=$iv_ruleOR.current; } 
	 EOF 
;

// Rule OR
ruleOR returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='OR' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getORAccess().getORKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getORAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_2='OR' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getORAccess().getORKeyword_1_0());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getORAccess().getLeftParenthesisKeyword_1_1());
    }

    { 
        newCompositeNode(grammarAccess.getORAccess().getExpressionParserRuleCall_1_2()); 
    }
    this_Expression_4=ruleExpression
    { 
        $current = $this_Expression_4.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getORAccess().getAndANDParserRuleCall_1_3_0()); 
	    }
		lv_and_5_0=ruleAND		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getORRule());
	        }
       		add(
       			$current, 
       			"and",
        		lv_and_5_0, 
        		"AND");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getORAccess().getOrORParserRuleCall_1_4_0()); 
	    }
		lv_or_6_0=ruleOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getORRule());
	        }
       		add(
       			$current, 
       			"or",
        		lv_or_6_0, 
        		"OR");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getORAccess().getRightParenthesisKeyword_1_5());
    }
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


