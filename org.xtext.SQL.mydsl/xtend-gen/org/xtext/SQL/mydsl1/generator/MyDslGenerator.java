/**
 * generated by Xtext
 */
package org.xtext.SQL.mydsl1.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.SQL.mydsl1.myDsl.Expression;
import org.xtext.SQL.mydsl1.myDsl.Model;
import org.xtext.SQL.mydsl1.myDsl.Option;
import org.xtext.SQL.mydsl1.myDsl.Select;
import org.xtext.SQL.mydsl1.myDsl.Value;
import org.xtext.SQL.mydsl1.myDsl.Variable;
import org.xtext.SQL.mydsl1.myDsl.Where;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class MyDslGenerator implements IGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Model> _filter = Iterables.<Model>filter(_iterable, Model.class);
    for (final Model e : _filter) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("TestGenerateSQL.java");
      CharSequence _VisitModel = this.VisitModel(e);
      fsa.generateFile(_builder.toString(), _VisitModel);
    }
  }
  
  public CharSequence VisitModel(final Model m) {
    CharSequence _xifexpression = null;
    EList<Select> _selects = m.getSelects();
    boolean _notEquals = (!Objects.equal(_selects, null));
    if (_notEquals) {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<Select> _selects_1 = m.getSelects();
        for(final Select x : _selects_1) {
          CharSequence _visitSelect = this.visitSelect(x);
          _builder.append(_visitSelect, "");
        }
      }
      _xifexpression = _builder;
    }
    return _xifexpression;
  }
  
  public CharSequence visitSelect(final Select s) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Variable> _froms_value = s.getFroms_value();
      for(final Variable f : _froms_value) {
        {
          EList<Variable> _select_value = s.getSelect_value();
          for(final Variable x : _select_value) {
            _builder.append("a.readFile(");
            CharSequence _visitFromValue = this.visitFromValue(f);
            _builder.append(_visitFromValue, "");
            _builder.append(").");
            {
              EList<Option> _options = s.getOptions();
              boolean _notEquals = (!Objects.equal(_options, null));
              if (_notEquals) {
                {
                  EList<Option> _options_1 = s.getOptions();
                  for(final Option o : _options_1) {
                    CharSequence _visitOption = this.visitOption(o);
                    _builder.append(_visitOption, "");
                  }
                }
              }
            }
            _builder.append(".map{");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("[");
            CharSequence _visitSelectValue = this.visitSelectValue(x);
            _builder.append(_visitSelectValue, "\t");
            _builder.append("] ");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }
  
  public Object visitVariable() {
    return null;
  }
  
  public CharSequence visitOption(final Option o) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Where> _where = o.getWhere();
      boolean _notEquals = (!Objects.equal(_where, null));
      if (_notEquals) {
        {
          EList<Where> _where_1 = o.getWhere();
          for(final Where x : _where_1) {
            CharSequence _visitWhere = this.visitWhere(x);
            _builder.append(_visitWhere, "");
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence visitWhere(final Where w) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Expression> _exprs = w.getExprs();
      for(final Expression x : _exprs) {
        CharSequence _visitExpression = this.visitExpression(x);
        _builder.append(_visitExpression, "");
      }
    }
    return _builder;
  }
  
  public CharSequence visitExpression(final Expression e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("filter({");
    {
      EList<Value> _column = e.getColumn();
      for(final Value x : _column) {
        CharSequence _visitValues = this.visitValues(x);
        _builder.append(_visitValues, "");
      }
    }
    _builder.append(".equals(\"");
    {
      EList<Value> _result = e.getResult();
      for(final Value y : _result) {
        CharSequence _visitValues_1 = this.visitValues(y);
        _builder.append(_visitValues_1, "");
      }
    }
    _builder.append("\")})");
    return _builder;
  }
  
  public CharSequence visitFromValue(final Variable v) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Value> _values = v.getValues();
      for(final Value x : _values) {
        CharSequence _visitValues = this.visitValues(x);
        _builder.append(_visitValues, "");
      }
    }
    return _builder;
  }
  
  public CharSequence visitSelectValue(final Variable v) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Value> _values = v.getValues();
      for(final Value x : _values) {
        CharSequence _visitValues = this.visitValues(x);
        _builder.append(_visitValues, "");
      }
    }
    {
      EList<Value> _values1 = v.getValues1();
      boolean _notEquals = (!Objects.equal(_values1, null));
      if (_notEquals) {
        {
          EList<Value> _values1_1 = v.getValues1();
          for(final Value y : _values1_1) {
            CharSequence _visitValues1 = this.visitValues1(y);
            _builder.append(_visitValues1, "");
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence visitValues1(final Value v) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(",");
    String _name = v.getName();
    _builder.append(_name, "");
    return _builder;
  }
  
  public CharSequence visitValues(final Value v) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = v.getName();
    _builder.append(_name, "");
    return _builder;
  }
}
