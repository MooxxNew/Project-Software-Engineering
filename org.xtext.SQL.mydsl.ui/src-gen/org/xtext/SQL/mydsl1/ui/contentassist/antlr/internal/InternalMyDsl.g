/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.SQL.mydsl1.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.SQL.mydsl1.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.SQL.mydsl1.services.MyDslGrammarAccess;

}

@parser::members {
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getModelAccess().getSelectsAssignment()); }
(rule__Model__SelectsAssignment)
{ after(grammarAccess.getModelAccess().getSelectsAssignment()); }
)
(
{ before(grammarAccess.getModelAccess().getSelectsAssignment()); }
(rule__Model__SelectsAssignment)*
{ after(grammarAccess.getModelAccess().getSelectsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelect
entryRuleSelect 
:
{ before(grammarAccess.getSelectRule()); }
	 ruleSelect
{ after(grammarAccess.getSelectRule()); } 
	 EOF 
;

// Rule Select
ruleSelect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectAccess().getGroup()); }
(rule__Select__Group__0)
{ after(grammarAccess.getSelectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getGroup()); }
(rule__Variable__Group__0)
{ after(grammarAccess.getVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getNameAssignment()); }
(rule__Value__NameAssignment)
{ after(grammarAccess.getValueAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOption
entryRuleOption 
:
{ before(grammarAccess.getOptionRule()); }
	 ruleOption
{ after(grammarAccess.getOptionRule()); } 
	 EOF 
;

// Rule Option
ruleOption
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOptionAccess().getWhereAssignment()); }
(rule__Option__WhereAssignment)
{ after(grammarAccess.getOptionAccess().getWhereAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhere
entryRuleWhere 
:
{ before(grammarAccess.getWhereRule()); }
	 ruleWhere
{ after(grammarAccess.getWhereRule()); } 
	 EOF 
;

// Rule Where
ruleWhere
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhereAccess().getGroup()); }
(rule__Where__Group__0)
{ after(grammarAccess.getWhereAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getAlternatives()); }
(rule__Condition__Alternatives)
{ after(grammarAccess.getConditionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAND
entryRuleAND 
:
{ before(grammarAccess.getANDRule()); }
	 ruleAND
{ after(grammarAccess.getANDRule()); } 
	 EOF 
;

// Rule AND
ruleAND
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getANDAccess().getAlternatives()); }
(rule__AND__Alternatives)
{ after(grammarAccess.getANDAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOR
entryRuleOR 
:
{ before(grammarAccess.getORRule()); }
	 ruleOR
{ after(grammarAccess.getORRule()); } 
	 EOF 
;

// Rule OR
ruleOR
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getORAccess().getAlternatives()); }
(rule__OR__Alternatives)
{ after(grammarAccess.getORAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Condition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getEqualsSignKeyword_0()); }

	'=' 

{ after(grammarAccess.getConditionAccess().getEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getConditionAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getConditionAccess().getLessThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getConditionAccess().getGreaterThanSignKeyword_2()); }

	'>' 

{ after(grammarAccess.getConditionAccess().getGreaterThanSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getConditionAccess().getLessThanSignEqualsSignKeyword_3()); }

	'<=' 

{ after(grammarAccess.getConditionAccess().getLessThanSignEqualsSignKeyword_3()); }
)

    |(
{ before(grammarAccess.getConditionAccess().getGreaterThanSignEqualsSignKeyword_4()); }

	'>=' 

{ after(grammarAccess.getConditionAccess().getGreaterThanSignEqualsSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AND__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDAccess().getGroup_0()); }
(rule__AND__Group_0__0)
{ after(grammarAccess.getANDAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getANDAccess().getGroup_1()); }
(rule__AND__Group_1__0)
{ after(grammarAccess.getANDAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OR__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORAccess().getGroup_0()); }
(rule__OR__Group_0__0)
{ after(grammarAccess.getORAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getORAccess().getGroup_1()); }
(rule__OR__Group_1__0)
{ after(grammarAccess.getORAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Select__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__0__Impl
	rule__Select__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getSELECTKeyword_0()); }

	'SELECT' 

{ after(grammarAccess.getSelectAccess().getSELECTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__1__Impl
	rule__Select__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getSelect_valueAssignment_1()); }
(rule__Select__Select_valueAssignment_1)
{ after(grammarAccess.getSelectAccess().getSelect_valueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__2__Impl
	rule__Select__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getFROMKeyword_2()); }

	'FROM' 

{ after(grammarAccess.getSelectAccess().getFROMKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__3__Impl
	rule__Select__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getFroms_valueAssignment_3()); }
(rule__Select__Froms_valueAssignment_3)
{ after(grammarAccess.getSelectAccess().getFroms_valueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getOptionsAssignment_4()); }
(rule__Select__OptionsAssignment_4)*
{ after(grammarAccess.getSelectAccess().getOptionsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Variable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getValuesAssignment_0()); }
(rule__Variable__ValuesAssignment_0)
{ after(grammarAccess.getVariableAccess().getValuesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getGroup_1()); }
(rule__Variable__Group_1__0)*
{ after(grammarAccess.getVariableAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Variable__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_1__0__Impl
	rule__Variable__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getVariableAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getValues1Assignment_1_1()); }
(rule__Variable__Values1Assignment_1_1)
{ after(grammarAccess.getVariableAccess().getValues1Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Where__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Where__Group__0__Impl
	rule__Where__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereAccess().getWHEREKeyword_0()); }

	'WHERE' 

{ after(grammarAccess.getWhereAccess().getWHEREKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Where__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Where__Group__1__Impl
	rule__Where__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereAccess().getExprsAssignment_1()); }
(rule__Where__ExprsAssignment_1)
{ after(grammarAccess.getWhereAccess().getExprsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Where__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Where__Group__2__Impl
	rule__Where__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereAccess().getAndAssignment_2()); }
(rule__Where__AndAssignment_2)?
{ after(grammarAccess.getWhereAccess().getAndAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Where__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Where__Group__3__Impl
	rule__Where__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereAccess().getOrAssignment_3()); }
(rule__Where__OrAssignment_3)?
{ after(grammarAccess.getWhereAccess().getOrAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Where__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Where__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getWhereAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getColumnAssignment_0()); }
(rule__Expression__ColumnAssignment_0)
{ after(grammarAccess.getExpressionAccess().getColumnAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
	rule__Expression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getConditionParserRuleCall_1()); }
	ruleCondition
{ after(grammarAccess.getExpressionAccess().getConditionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getResultAssignment_2()); }
(rule__Expression__ResultAssignment_2)
{ after(grammarAccess.getExpressionAccess().getResultAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AND__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AND__Group_0__0__Impl
	rule__AND__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AND__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDAccess().getANDKeyword_0_0()); }

	'AND' 

{ after(grammarAccess.getANDAccess().getANDKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AND__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AND__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AND__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
{ after(grammarAccess.getANDAccess().getExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AND__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AND__Group_1__0__Impl
	rule__AND__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AND__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDAccess().getANDKeyword_1_0()); }

	'AND' 

{ after(grammarAccess.getANDAccess().getANDKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AND__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AND__Group_1__1__Impl
	rule__AND__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AND__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getANDAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AND__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AND__Group_1__2__Impl
	rule__AND__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AND__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDAccess().getExpressionParserRuleCall_1_2()); }
	ruleExpression
{ after(grammarAccess.getANDAccess().getExpressionParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AND__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AND__Group_1__3__Impl
	rule__AND__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AND__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDAccess().getAndAssignment_1_3()); }
(rule__AND__AndAssignment_1_3)?
{ after(grammarAccess.getANDAccess().getAndAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AND__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AND__Group_1__4__Impl
	rule__AND__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AND__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDAccess().getOrAssignment_1_4()); }
(rule__AND__OrAssignment_1_4)?
{ after(grammarAccess.getANDAccess().getOrAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AND__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AND__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AND__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDAccess().getRightParenthesisKeyword_1_5()); }

	')' 

{ after(grammarAccess.getANDAccess().getRightParenthesisKeyword_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__OR__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OR__Group_0__0__Impl
	rule__OR__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OR__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORAccess().getORKeyword_0_0()); }

	'OR' 

{ after(grammarAccess.getORAccess().getORKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OR__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OR__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OR__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
{ after(grammarAccess.getORAccess().getExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OR__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OR__Group_1__0__Impl
	rule__OR__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OR__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORAccess().getORKeyword_1_0()); }

	'OR' 

{ after(grammarAccess.getORAccess().getORKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OR__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OR__Group_1__1__Impl
	rule__OR__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OR__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getORAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OR__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OR__Group_1__2__Impl
	rule__OR__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OR__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORAccess().getExpressionParserRuleCall_1_2()); }
	ruleExpression
{ after(grammarAccess.getORAccess().getExpressionParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OR__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OR__Group_1__3__Impl
	rule__OR__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OR__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORAccess().getAndAssignment_1_3()); }
(rule__OR__AndAssignment_1_3)?
{ after(grammarAccess.getORAccess().getAndAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OR__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OR__Group_1__4__Impl
	rule__OR__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__OR__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORAccess().getOrAssignment_1_4()); }
(rule__OR__OrAssignment_1_4)?
{ after(grammarAccess.getORAccess().getOrAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OR__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OR__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OR__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORAccess().getRightParenthesisKeyword_1_5()); }

	')' 

{ after(grammarAccess.getORAccess().getRightParenthesisKeyword_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}















rule__Model__SelectsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSelectsSelectParserRuleCall_0()); }
	ruleSelect{ after(grammarAccess.getModelAccess().getSelectsSelectParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Select_valueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getSelect_valueVariableParserRuleCall_1_0()); }
	ruleVariable{ after(grammarAccess.getSelectAccess().getSelect_valueVariableParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Froms_valueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getFroms_valueVariableParserRuleCall_3_0()); }
	ruleVariable{ after(grammarAccess.getSelectAccess().getFroms_valueVariableParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__OptionsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getOptionsOptionParserRuleCall_4_0()); }
	ruleOption{ after(grammarAccess.getSelectAccess().getOptionsOptionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__ValuesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getValuesValueParserRuleCall_0_0()); }
	ruleValue{ after(grammarAccess.getVariableAccess().getValuesValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Values1Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getValues1ValueParserRuleCall_1_1_0()); }
	ruleValue{ after(grammarAccess.getVariableAccess().getValues1ValueParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getValueAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Option__WhereAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionAccess().getWhereWhereParserRuleCall_0()); }
	ruleWhere{ after(grammarAccess.getOptionAccess().getWhereWhereParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Where__ExprsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereAccess().getExprsExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getWhereAccess().getExprsExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Where__AndAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereAccess().getAndANDParserRuleCall_2_0()); }
	ruleAND{ after(grammarAccess.getWhereAccess().getAndANDParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Where__OrAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereAccess().getOrORParserRuleCall_3_0()); }
	ruleOR{ after(grammarAccess.getWhereAccess().getOrORParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ColumnAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getColumnValueParserRuleCall_0_0()); }
	ruleValue{ after(grammarAccess.getExpressionAccess().getColumnValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ResultAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getResultValueParserRuleCall_2_0()); }
	ruleValue{ after(grammarAccess.getExpressionAccess().getResultValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AND__AndAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDAccess().getAndANDParserRuleCall_1_3_0()); }
	ruleAND{ after(grammarAccess.getANDAccess().getAndANDParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AND__OrAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDAccess().getOrORParserRuleCall_1_4_0()); }
	ruleOR{ after(grammarAccess.getANDAccess().getOrORParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OR__AndAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORAccess().getAndANDParserRuleCall_1_3_0()); }
	ruleAND{ after(grammarAccess.getORAccess().getAndANDParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OR__OrAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORAccess().getOrORParserRuleCall_1_4_0()); }
	ruleOR{ after(grammarAccess.getORAccess().getOrORParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


