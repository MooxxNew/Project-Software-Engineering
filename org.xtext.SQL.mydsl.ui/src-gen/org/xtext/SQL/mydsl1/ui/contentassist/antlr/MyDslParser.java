/*
* generated by Xtext
*/
package org.xtext.SQL.mydsl1.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.SQL.mydsl1.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.SQL.mydsl1.ui.contentassist.antlr.internal.InternalMyDslParser createParser() {
		org.xtext.SQL.mydsl1.ui.contentassist.antlr.internal.InternalMyDslParser result = new org.xtext.SQL.mydsl1.ui.contentassist.antlr.internal.InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
					put(grammarAccess.getANDAccess().getAlternatives(), "rule__AND__Alternatives");
					put(grammarAccess.getORAccess().getAlternatives(), "rule__OR__Alternatives");
					put(grammarAccess.getSelectAccess().getGroup(), "rule__Select__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getVariableAccess().getGroup_1(), "rule__Variable__Group_1__0");
					put(grammarAccess.getWhereAccess().getGroup(), "rule__Where__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getANDAccess().getGroup_0(), "rule__AND__Group_0__0");
					put(grammarAccess.getANDAccess().getGroup_1(), "rule__AND__Group_1__0");
					put(grammarAccess.getORAccess().getGroup_0(), "rule__OR__Group_0__0");
					put(grammarAccess.getORAccess().getGroup_1(), "rule__OR__Group_1__0");
					put(grammarAccess.getModelAccess().getSelectsAssignment(), "rule__Model__SelectsAssignment");
					put(grammarAccess.getSelectAccess().getSelect_valueAssignment_1(), "rule__Select__Select_valueAssignment_1");
					put(grammarAccess.getSelectAccess().getFroms_valueAssignment_3(), "rule__Select__Froms_valueAssignment_3");
					put(grammarAccess.getSelectAccess().getOptionsAssignment_4(), "rule__Select__OptionsAssignment_4");
					put(grammarAccess.getVariableAccess().getValuesAssignment_0(), "rule__Variable__ValuesAssignment_0");
					put(grammarAccess.getVariableAccess().getValues1Assignment_1_1(), "rule__Variable__Values1Assignment_1_1");
					put(grammarAccess.getValueAccess().getNameAssignment(), "rule__Value__NameAssignment");
					put(grammarAccess.getOptionAccess().getWhereAssignment(), "rule__Option__WhereAssignment");
					put(grammarAccess.getWhereAccess().getExprsAssignment_1(), "rule__Where__ExprsAssignment_1");
					put(grammarAccess.getWhereAccess().getAndAssignment_2(), "rule__Where__AndAssignment_2");
					put(grammarAccess.getWhereAccess().getOrAssignment_3(), "rule__Where__OrAssignment_3");
					put(grammarAccess.getExpressionAccess().getColumnAssignment_0(), "rule__Expression__ColumnAssignment_0");
					put(grammarAccess.getExpressionAccess().getResultAssignment_2(), "rule__Expression__ResultAssignment_2");
					put(grammarAccess.getANDAccess().getAndAssignment_1_3(), "rule__AND__AndAssignment_1_3");
					put(grammarAccess.getANDAccess().getOrAssignment_1_4(), "rule__AND__OrAssignment_1_4");
					put(grammarAccess.getORAccess().getAndAssignment_1_3(), "rule__OR__AndAssignment_1_3");
					put(grammarAccess.getORAccess().getOrAssignment_1_4(), "rule__OR__OrAssignment_1_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.SQL.mydsl1.ui.contentassist.antlr.internal.InternalMyDslParser typedParser = (org.xtext.SQL.mydsl1.ui.contentassist.antlr.internal.InternalMyDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
